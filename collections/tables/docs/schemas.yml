components:
  schemas:
    TableID:
      description: Table ID or unique slug.
      oneOf:
        - $ref: "../../../docs/common.yml#/components/schemas/UUID"
        - type: string

    TableAttributes:
      allOf:
        - $ref: "../../items/docs/schemas.yml#/components/schemas/ItemAttributes"
        - description: The fields associated with a table.
          type: object
          properties:
            methods:
              description: |
                This field describes the various ways that the table could
                be rolled. For example, the standard _Taking Action_ table
                can be rolled normally (`2d6 + Ability`), with advantage
                (`3d6kh2 + Ability`) or with disadvantage (`3d6kl2 + Ability`).
                Many tables will just have one, but this is defined as a
                dictionary to support more complex use cases.
                
                If you have a method with the key `normal`, that will be used
                by default (when no other method is specified). Otherwise the
                first method will be used.
              type: object
              additionalProperties:
                $ref: "#/components/schemas/TableRollMethod"
            rows:
              type: array
              items:
                $ref: "#/components/schemas/TableRow"

    TableResource:
      description: The full JSON:API resource describing a table.
      type: object
      required: [type, id]
      properties:
        type:
          type: string
          example: "tables"
        id:
          $ref: "../../../docs/common.yml#/components/schemas/UUID"
        attributes:
          $ref: "#/components/schemas/TableAttributes"
        relationships:
          $ref: "../../items/docs/schemas.yml#/components/schemas/AuthorsRelationship"

    TableResponse:
      description: A JSON:API response that returns a single table.
      type: object
      properties:
        jsonapi:
          $ref: "../../../docs/common.yml#/components/schemas/JSONAPIHeader"
        links:
          $ref: "../../../docs/common.yml#/components/schemas/Links"
        data:
          $ref: "#/components/schemas/TableResource"
        included:
          type: array
          items:
            $ref: "../../users/docs/schemas.yml#/components/schemas/IncludedUser"

    TablesResponse:
      description: A JSON:API response that returns a single table.
      type: object
      properties:
        jsonapi:
          $ref: "../../../docs/common.yml#/components/schemas/JSONAPIHeader"
        links:
          $ref: "../../../docs/common.yml#/components/schemas/Links"
        data:
          type: array
          items:
            $ref: "#/components/schemas/TableResource"
        included:
          type: array
          items:
            $ref: "../../users/docs/schemas.yml#/components/schemas/IncludedUser"

    TableCreation:
      description: The object that a client must provide to create a new table.
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [type, attributes]
          properties:
            type:
              type: string
              example: "tables"
            attributes:
              allOf:
                - $ref: "../../items/docs/schemas.yml#/components/schemas/ItemAttributes"
                - description: The fields associated with a table.
                  required: [name, start]
                  type: object
                  properties:
                    methods:
                      description: |
                        This field describes the various ways that the table could
                        be rolled. For example, the standard _Taking Action_ table
                        can be rolled normally (`2d6 + Ability`), with advantage
                        (`3d6kh2 + Ability`) or with disadvantage (`3d6kl2 + Ability`).
                        Many tables will just have one, but this is defined as a
                        dictionary to support more complex use cases.
        
                        If you have a method with the key `normal`, that will be used
                        by default (when no other method is specified). Otherwise the
                        first method will be used.
                      type: object
                      additionalProperties:
                        $ref: "#/components/schemas/TableRollMethod"
                    rows:
                      type: array
                      items:
                        $ref: "#/components/schemas/TableRow"
            relationships:
              $ref: "../../items/docs/schemas.yml#/components/schemas/AuthorsRelationship"

    TablePatch:
      description: The object that a client must provide to update a table.
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [type, id attributes]
          properties:
            type:
              type: string
              example: "tables"
            id:
              $ref: "#/components/schemas/TableID"
            attributes:
              allOf:
                - $ref: "../../items/docs/schemas.yml#/components/schemas/ItemAttributes"
                - description: The fields associated with a table.
                  type: object
                  properties:
                    methods:
                      description: |
                        This field describes the various ways that the table could
                        be rolled. For example, the standard _Taking Action_ table
                        can be rolled normally (`2d6 + Ability`), with advantage
                        (`3d6kh2 + Ability`) or with disadvantage (`3d6kl2 + Ability`).
                        Many tables will just have one, but this is defined as a
                        dictionary to support more complex use cases.
        
                        If you have a method with the key `normal`, that will be used
                        by default (when no other method is specified). Otherwise the
                        first method will be used.
                      type: object
                      additionalProperties:
                        $ref: "#/components/schemas/TableRollMethod"
                    rows:
                      type: array
                      items:
                        $ref: "#/components/schemas/TableRow"
            relationships:
              $ref: "../../items/docs/schemas.yml#/components/schemas/AuthorsRelationship"

    TableRollMethod:
      description: |
        Many tables just have one way to roll on them, but some may have
        several. A `TableRollMethod` object defines the details of one way
        that someone could use the table.
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for this table roll method.
        text:
          $ref: "../../../docs/common.yml#/components/schemas/RandomizedString"
        expr:
          type: string
          description: |
            The dice expression that should be used when someone rolls on
            this table using this method.
          example: 2d6 + Intelligence

    TableRow:
      description: A single row in a random table.
      type: object
      properties:
        min:
          type: number
          description: |
            The lowest number on a roll that will return this result.
            If not provided, then any number lower than the `max` will
            return this result.
        max:
          type: number
          description: |
            The highest number on a roll that will return this result.
            If not provided, then any number higher than the `min`
            will return this result.
        result:
          $ref: "../../../docs/common.yml#/components/schemas/Note"
